#!/usr/bin/env node

/**
 * Module dependencies.
 */

var config = require('../config.json');
var debug = require('debug')('Juke-Jitsu:server');
var http;

/**
   * Normalize a port into a number, string, or false.
   * @param {int} val Desired port number
   */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(config.port || process.env.PORT || '3000');

module.exports = {
  startServer: startServer
}

function startServer() {

  http = require('../app');

  /**
   * Listen on provided port, on all network interfaces.
   */
  http.listen(port);
  http.on('error', onError);
  http.on('listening', onListening);

  /**
   * Event listener for HTTP server "error" event.
   * @param {Object} error The error thrown
   */
  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }


  /**
   * Event listener for HTTP server "listening" event.
   */
  function onListening() {
    var addr = http.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }


  console.log('Running on http://localhost:' + port);

}